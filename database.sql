--=================================================
--========== SCHEMA DATABASE ======================
--=================================================

--==================
--===== TABLES =====
--==================
create table public.ads (
  id bigint generated by default as identity not null,
  user_id uuid not null,
  name text not null,
  type text null,
  asset text not null,
  fiat text not null,
  price numeric not null,
  total_amount numeric not null,
  order_limit_min numeric not null,
  order_limit_max numeric not null,
  payment_methods text[] not null,
  payment_time integer not null,
  require_verification boolean null default false,
  terms text null,
  auto_reply text null,
  region text not null,
  status text null default 'online'::text,
  updated_at timestamp with time zone null default now(),
  created_at timestamp with time zone not null default now(),
  is_confirmed boolean null default false,
  constraint ads_pkey primary key (id),
  constraint ads_user_id_fkey foreign KEY (user_id) references auth.users (id),
  constraint ads_status_check check (
    (
      status = any (
        array['online'::text, 'offline'::text, 'private'::text]
      )
    )
  ),
  constraint ads_type_check check ((type = any (array['buy'::text, 'sell'::text])))
) TABLESPACE pg_default;

create table public.orders (
  id bigint generated by default as identity not null,
  ad_id bigint null,
  initiator_id uuid null,
  counterparty_id uuid null,
  fiat text null,
  asset text null,
  amount_fiat numeric null,
  amount_asset numeric null,
  price numeric null,
  payment_method text null,
  payment_time integer null,
  buyer_id uuid null default gen_random_uuid (),
  seller_id uuid null default gen_random_uuid (),
  buyer_confirmed_payment boolean null,
  seller_released_assets boolean null,
  status text null,
  updated_at timestamp without time zone null default now(),
  created_at timestamp without time zone not null default now(),
  constraint orders_pkey primary key (id),
  constraint orders_ad_id_fkey foreign KEY (ad_id) references ads (id),
  constraint orders_counterparty_id_fkey foreign KEY (counterparty_id) references auth.users (id),
  constraint orders_initiator_id_fkey foreign KEY (initiator_id) references auth.users (id),
  constraint orders_status_check check (
    status = any (
      array[
        'pending'::text,
        'paid'::text,
        'released'::text,
        'completed'::text,
        'cancelled'::text,
        'disputed'::text
      ]
    )
  )
) TABLESPACE pg_default;

create table public.messages (
  id bigint generated by default as identity not null,
  order_id bigint null,
  sender_id uuid null,
  message text null,
  created_at timestamp with time zone not null default now(),
  constraint messages_pkey primary key (id),
  constraint messages_order_id_fkey foreign KEY (order_id) references orders (id),
  constraint messages_sender_id_fkey foreign KEY (sender_id) references auth.users (id)
) TABLESPACE pg_default;


create table public.admins (
  id bigint generated by default as identity not null,
  user_id uuid null,
  created_at timestamp with time zone not null default now(),
  constraint admins_pkey primary key (id),
  constraint admins_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

--====================
--===== FUNCTION =====
--====================

-- Function to update ad's total_amount when an order is completed
CREATE OR REPLACE FUNCTION public.update_ad_amount_on_order_complete()
RETURNS TRIGGER AS $$
BEGIN
  -- Only process when an order status changes to 'completed'
  IF NEW.status = 'completed' AND (OLD.status IS NULL OR OLD.status != 'completed') THEN
    -- Update the ad's total_amount by subtracting the order amount
    UPDATE public.ads
    SET 
      total_amount = total_amount - NEW.amount_asset,
      -- If remaining amount is less than minimum order limit, change status to offline
      status = CASE 
                WHEN (total_amount - NEW.amount_asset) < order_limit_min THEN 'offline'
                ELSE status
              END
    WHERE id = NEW.ad_id;
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;


--====================
--===== TRIGGER ======
--====================
-- Trigger to execute the function when an order is updated
CREATE TRIGGER update_ad_amount_trigger
AFTER UPDATE OF status ON public.orders
FOR EACH ROW
EXECUTE FUNCTION public.update_ad_amount_on_order_complete();

-- Trigger to execute the function when a new completed order is inserted
CREATE TRIGGER insert_completed_order_trigger
AFTER INSERT ON public.orders
FOR EACH ROW
WHEN (NEW.status = 'completed')
EXECUTE FUNCTION public.update_ad_amount_on_order_complete();

