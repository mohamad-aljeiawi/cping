--=================================================
--========== SCHEMA DATABASE ======================
--=================================================
--==================
--===== TABLES =====
--==================
create table public.persons (
  id bigint generated by default as identity not null,
  telegram_id bigint not null,
  first_name text not null,
  last_name text not null default '-'::text,
  username text not null,
  language_code text not null,
  is_premium boolean not null default false,
  created_at timestamp without time zone not null default now(),
  constraint persons_pkey primary key (id),
  constraint persons_telegram_id_key unique (telegram_id),
  constraint persons_username_key unique (username)
) TABLESPACE pg_default;

create table public.person_logs (
  id bigint generated by default as identity not null,
  person_id bigint not null,
  telegram_id bigint not null,
  first_name text not null,
  last_name text not null default '-'::text,
  username text not null,
  language_code text not null,
  is_premium boolean not null default false,
  created_at timestamp without time zone not null default now(),
  constraint person_logs_pkey primary key (id),
  constraint person_logs_person_id_fkey foreign key (person_id) references persons (id)
) TABLESPACE pg_default;

create table public.otps (
  id bigint generated by default as identity not null,
  person_id bigint not null,
  otp text not null,
  expires_at timestamp without time zone not null default (now() + '00:01:00'::interval),
  created_at timestamp without time zone not null default now(),
  constraint otps_pkey primary key (id),
  constraint otps_person_id_fkey foreign KEY (person_id) references persons (id),
  constraint chk_otp_not_empty check ((length(otp) >= 4))
) TABLESPACE pg_default;

create table public.ipinfos (
  id bigint generated by default as identity not null,
  person_id bigint null,
  ip text not null,
  city text not null,
  region text not null,
  country text not null,
  loc text not null,
  org text not null,
  timezone text not null,
  device_info text not null,
  created_at timestamp without time zone not null default now(),
  constraint ipinfos_pkey primary key (id),
  constraint ipinfos_person_id_fkey foreign KEY (person_id) references persons (id)
) TABLESPACE pg_default;

create table public.person_roles (
  id bigint generated by default as identity not null,
  person_id bigint not null,
  role text not null,
  created_at timestamp without time zone not null default now(),
  constraint person_roles_pkey primary key (id),
  constraint person_roles_person_id_key unique (person_id),
  constraint person_roles_person_id_fkey foreign KEY (person_id) references persons (id),
  constraint chk_valid_role check (
    (
      role = any (
        array['user'::text, 'admin'::text, 'seller'::text]
      )
    )
  )
) TABLESPACE pg_default;

create table public.wallets (
  id bigint generated by default as identity not null,
  person_id bigint not null,
  balance bigint not null default 0,
  created_at timestamp without time zone not null default now(),
  constraint wallets_pkey primary key (id),
  constraint wallets_person_id_fkey foreign KEY (person_id) references persons (id),
  constraint chk_balance_non_negative check ((balance >= 0))
) TABLESPACE pg_default;

create table public.plans (
  id bigint generated by default as identity not null,
  name text not null,
  description text not null,
  feature_mask bigint not null default 0,
  price bigint not null default 0,
  created_at timestamp without time zone not null default now(),
  constraint plans_pkey primary key (id),
  constraint chk_price_positive check ((price >= 0)),
  constraint chk_feature_mask_positive check ((feature_mask >= 0))
) TABLESPACE pg_default;

create table public.subscriptions (
  id bigint generated by default as identity not null,
  plan_id bigint not null,
  seller_id bigint not null,
  person_id bigint not null,
  status text not null,
  created_at timestamp without time zone not null default now(),
  constraint subscriptions_pkey primary key (id),
  constraint subscriptions_plan_id_fkey foreign KEY (plan_id) references plans (id),
  constraint subscriptions_seller_id_fkey foreign KEY (seller_id) references persons (id),
  constraint subscriptions_person_id_fkey foreign KEY (person_id) references persons (id),
  constraint chk_subscription_status check (
    (
      status = any (
        array['active'::text, 'expired'::text, 'canceled'::text]
      )
    )
  )
) TABLESPACE pg_default;

--====================
--===== FUNCTION =====
--====================
create or replace function is_admin () returns boolean as $$
declare
  current_telegram_id bigint;
begin
  current_telegram_id := (current_setting('request.jwt.claims', true)::json->>'telegram_id')::bigint;
  return exists (
    select 1 from persons p
    join person_roles r on r.person_id = p.id
    where p.telegram_id = current_telegram_id and r.role = 'admin'
  );
end;
$$ language plpgsql stable;

create or replace function can_generate_otp (person_id_input bigint) returns boolean as $$
declare
  count_5min int;
begin
  select count(*) into count_5min
  from otps
  where person_id = person_id_input
    and created_at > now() - interval '5 minutes';

  if count_5min >= 3 then
    return false;
  else
    return true;
  end if;
end;
$$ language plpgsql stable;

--====================
--===== TRIGGER ======
--====================
-- ================================
-- RLS Policies for Supabase Schema
-- ================================
create policy select_persons on persons for
select
  using (
    telegram_id::text = current_setting('request.jwt.claims', true)::json ->> 'telegram_id'
    or is_admin ()
  );

create policy update_persons on persons
for update
  using (
    telegram_id::text = current_setting('request.jwt.claims', true)::json ->> 'telegram_id'
    or is_admin ()
  );


create policy select_person_logs on person_logs for
select
  using (
    telegram_id::text = current_setting('request.jwt.claims', true)::json ->> 'telegram_id'
    or is_admin ()
  );

create policy update_person_logs on person_logs
for update
  using (
    telegram_id::text = current_setting('request.jwt.claims', true)::json ->> 'telegram_id'
    or is_admin ()
  );

create policy select_person_roles on person_roles for
select
  using (
    exists (
      select
        1
      from
        persons p
      where
        p.id = person_roles.person_id
        and p.telegram_id::text = current_setting('request.jwt.claims', true)::json ->> 'telegram_id'
    )
    or is_admin ()
  );

create policy select_wallets on wallets for
select
  using (
    exists (
      select
        1
      from
        persons p
      where
        p.id = wallets.person_id
        and p.telegram_id::text = current_setting('request.jwt.claims', true)::json ->> 'telegram_id'
    )
    or is_admin ()
  );

create policy select_otps on otps for
select
  using (
    exists (
      select
        1
      from
        persons p
      where
        p.id = otps.person_id
        and p.telegram_id::text = current_setting('request.jwt.claims', true)::json ->> 'telegram_id'
    )
    or is_admin ()
  );

create policy insert_otps on otps for INSERT
with
  check (
    exists (
      select
        1
      from
        persons p
      where
        p.id = otps.person_id
        and p.telegram_id::text = current_setting('request.jwt.claims', true)::json ->> 'telegram_id'
    )
    or is_admin ()
  );

create policy select_ipinfos on ipinfos for
select
  using (
    exists (
      select
        1
      from
        persons p
      where
        p.id = ipinfos.person_id
        and p.telegram_id::text = current_setting('request.jwt.claims', true)::json ->> 'telegram_id'
    )
    or is_admin ()
  );

create policy insert_ipinfos on ipinfos for INSERT
with
  check (
    exists (
      select
        1
      from
        persons p
      where
        p.id = ipinfos.person_id
        and p.telegram_id::text = current_setting('request.jwt.claims', true)::json ->> 'telegram_id'
    )
    or is_admin ()
  );

create policy select_plans on plans for
select
  using (true);

create policy select_subscriptions on subscriptions for
select
  using (
    exists (
      select
        1
      from
        persons p
      where
        p.id = subscriptions.person_id
        and p.telegram_id::text = current_setting('request.jwt.claims', true)::json ->> 'telegram_id'
    )
    or exists (
      select
        1
      from
        persons p
      where
        p.id = subscriptions.seller_id
        and p.telegram_id::text = current_setting('request.jwt.claims', true)::json ->> 'telegram_id'
    )
    or is_admin ()
  );